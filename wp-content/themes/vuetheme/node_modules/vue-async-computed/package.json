{
  "_args": [
    [
      {
        "raw": "vue-async-computed",
        "scope": null,
        "escapedName": "vue-async-computed",
        "name": "vue-async-computed",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/danielcastillomarfull/Projects/ingeoter/wp-content/themes/vuetheme"
    ]
  ],
  "_from": "vue-async-computed@latest",
  "_id": "vue-async-computed@3.1.3",
  "_inCache": true,
  "_location": "/vue-async-computed",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/vue-async-computed-3.1.3.tgz_1494584708664_0.5322369977366179"
  },
  "_npmUser": {
    "name": "foxbenjaminfox",
    "email": "foxbenjaminfox@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vue-async-computed",
    "scope": null,
    "escapedName": "vue-async-computed",
    "name": "vue-async-computed",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vue-async-computed/-/vue-async-computed-3.1.3.tgz",
  "_shasum": "30d781a4b7d0478ae4106a238dbaf7e9725d1b64",
  "_shrinkwrap": null,
  "_spec": "vue-async-computed",
  "_where": "/Users/danielcastillomarfull/Projects/ingeoter/wp-content/themes/vuetheme",
  "author": {
    "name": "Benjamin Fox",
    "email": "foxbenjaminfox@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/foxbenjaminfox/vue-async-computed/issues"
  },
  "dependencies": {},
  "description": "Async computed properties for Vue",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.24.1",
    "babel-eslint": "^7.2.3",
    "babel-istanbul": "^0.12.2",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-rename-umd-globals": "^1.0.0",
    "babel-plugin-transform-es2015-modules-umd": "^6.24.1",
    "babel-preset-es2015": "^6.24.1",
    "coveralls": "^2.13.1",
    "dependency-check": "^2.8.0",
    "doctoc": "^1.3.0",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^6.0.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^2.3.1",
    "estraverse-fb": "^1.3.1",
    "rimraf": "^2.6.1",
    "tap-spec": "^4.1.1",
    "tape": "^4.5.1",
    "vue": "^2.3.3",
    "watch": "^1.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "30d781a4b7d0478ae4106a238dbaf7e9725d1b64",
    "tarball": "https://registry.npmjs.org/vue-async-computed/-/vue-async-computed-3.1.3.tgz"
  },
  "files": [
    "bin/",
    "dist/"
  ],
  "gitHead": "488ea560e928ff2bbb06f81cf55605d4e506848c",
  "homepage": "https://github.com/foxbenjaminfox/vue-async-computed#readme",
  "keywords": [
    "vue",
    "data",
    "async",
    "computed",
    "computed data"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "foxbenjaminfox",
      "email": "foxbenjaminfox@gmail.com"
    }
  ],
  "name": "vue-async-computed",
  "optionalDependencies": {},
  "peerDependencies": {
    "vue": "~2"
  },
  "readme": "<big><h1 align=\"center\">vue-async-computed</h1></big>\n\n<p align=\"center\">\n  <a href=\"https://npmjs.org/package/vue-async-computed\">\n    <img src=\"https://img.shields.io/npm/v/vue-async-computed.svg?style=flat-square\"\n         alt=\"NPM Version\">\n  </a>\n\n  <a href=\"https://coveralls.io/r/foxbenjaminfox/vue-async-computed\">\n    <img src=\"https://img.shields.io/coveralls/foxbenjaminfox/vue-async-computed.svg?style=flat-square\"\n         alt=\"Coverage Status\">\n  </a>\n\n  <a href=\"https://travis-ci.org/foxbenjaminfox/vue-async-computed\">\n    <img src=\"https://img.shields.io/travis/foxbenjaminfox/vue-async-computed.svg?style=flat-square\"\n         alt=\"Build Status\">\n  </a>\n\n  <a href=\"https://npmjs.org/package/vue-async-computed\">\n    <img src=\"http://img.shields.io/npm/dm/vue-async-computed.svg?style=flat-square\"\n         alt=\"Downloads\">\n  </a>\n\n  <a href=\"https://david-dm.org/foxbenjaminfox/vue-async-computed.svg\">\n    <img src=\"https://david-dm.org/foxbenjaminfox/vue-async-computed.svg?style=flat-square\"\n         alt=\"Dependency Status\">\n  </a>\n\n  <a href=\"https://github.com/foxbenjaminfox/vue-async-computed/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/npm/l/vue-async-computed.svg?style=flat-square\"\n         alt=\"License\">\n  </a>\n</p>\n\n**This plugin is now Vue 2.0 compatible!**\n\nWith this plugin, you can have computed properties in Vue that are computed asynchronously.\n\nWithout using this plugin, you can't do this:\n\n````js\nnew Vue({\n  data: {\n    userId: 1\n  },\n  computed: {\n    username () {\n      // Using vue-resource\n      return Vue.http.get('/get-username-by-id/' + this.userId)\n        // This assumes that this endpoint will send us a response\n        // that contains something like this:\n        // { \n        //   \"username\": \"username-goes-here\"\n        // }\n        .then(response => response.data.username)\n    }\n  }\n}\n````\n\nOr rather, you could, but it wouldn't do what you'd want it to do. But using this plugin, it works just like you'd expect:\n\n````js\nnew Vue({\n  data: {\n    userId: 1\n  },\n  asyncComputed: {\n    username () {\n      return Vue.http.get('/get-username-by-id/' + this.userId)\n        .then(response => response.data.username)\n    }\n  }\n}\n````\n\nThis is especially useful with ES7 async functions:\n\n````js\nnew Vue({\n  asyncComputed: {\n    async someCalculation () {\n      const x = await someAsycFunction()\n      const y = await anotherAsyncFunction()\n      return x + y\n    }\n  }\n})\n````\n\n## Install\n\n````sh\nnpm install --save vue-async-computed\n````\n\nAlternately, you can link it directly from a CDN:\n\n````html\n<script src=\"https://unpkg.com/vue-async-computed\"></script>\n<!-- \n  That will always point to the latest version of vue-async-computed.\n  You probably want to instead pin it to a specific version:\n-->\n<script src=\"https://unpkg.com/vue-async-computed@3.1.0\"></script>\n````\n\nWhen used with a module system such as `webpack` or `browserify`, you need to explicitly install `vue-async-computed` via `Vue.use()`:\n\n````js\nimport Vue from 'vue'\nimport AsyncComputed from 'vue-async-computed'\n\nVue.use(AsyncComputed)\n````\n\nYou don't need to do this when using global script tags. So long as you include `vue-async-computed` in a script tag after Vue itself, it will be installed automatically.\n\n## Usage example\n\n````js\nimport AsyncComputed from 'vue-async-computed'\n\n/* Initialize the plugin */\nVue.use(AsyncComputed)\n\n/*\n   Then, when you create a Vue instance (or component),\n   you can pass an object named \"asyncComputed\" as well as\n   or instead of the standard \"computed\" option. The functions\n   you pass to \"asyncComputed\" should return promises, and the values\n   those promises resolve to are then asynchronously bound to the\n   Vue instance as they resolve. Just as with normal computed\n   properties, if the data the property depends on changes\n   then the property is re-run automatically.\n   \n   You can almost completely ignore the fact that behind the\n   scenes they are asynchronous. The one thing to remember is\n   that until a asynchronous property's promise resolves\n   for the first time, the value of the computed property is null.\n*/\n\nconst vm = new Vue({\n  data: {\n    x: 2,\n    y: 3\n  },\n  asyncComputed: {\n    sum () {\n      const total = this.x + this.y\n      return new Promise(resolve =>\n        setTimeout(() => resolve(total), 1000)\n      )\n    }\n  }\n})\n\n/*\n   Until one second has passed, vm.sum will be null.  After that,\n   vm.sum will be 5. If you change vm.x or vm.y, then one\n   second later vm.sum will automatically update itself to be\n   the sum of the values to which you set vm.x and vm.y the previous second.\n*/\n````\n\n[Like with regular synchronous computed properties](https://vuejs.org/guide/computed.html#Computed-Setter), you can pass an object\nwith a `get` method instead of a function, but unlike regular computed\nproperties, async computed properties are always getter-only. If the\nobject provided has a `set` method it will be ignored.\n\nAsync computed properties can also have a custom default value, which will\nbe used until the data is loaded for the first time:\n\n````js\nnew Vue({\n  data: {\n    postId: 1\n  },\n  asyncComputed: {\n    blogPostContent: {\n      // The `get` function is the same as the function you would\n      // pass directly as the value to `blogPostContent` if you\n      // didn't need to specify a default value.\n      get () {\n        return Vue.http.get('/post/' + this.postId)\n          .then(response => response.data.postContent)\n       },\n       // The computed proporty `blogPostContent` will have \n       // the value 'Loading...' until the first time the promise\n       // returned from the `get` function resolves.\n       default: 'Loading...'\n    }\n  }\n}\n\n/*\n   Now you can display {{blogPostContent}} in your template, which\n   will show a loading message until the blog post's content arrives\n   from the server.\n*/\n````\n\nYou can instead define the default value as a function, in order to depend on\nprops or on data:\n\n````js\nnew Vue({\n  data: {\n    postId: 1\n  },\n  asyncComputed: {\n    blogPostContent: {\n      get () {\n        return Vue.http.get('/post/' + this.postId)\n          .then(response => response.data.postContent)\n       },\n       default () {\n         return 'Loading post ' + this.postId\n       }\n    }\n  }\n}\n````\n\nYou can also set a custom global default value in the options passed to `Vue.use`:\n\n````javascript\nVue.use(AsyncComputed, {\n  default: 'Global default value'\n})\n````\n\n## Error handling\n\nBy default, in case of a rejected promise in an async computed property, vue-async-computed will take care of logging the error for you.\n\nIf you want to use a custom logging function, the plugin takes an `errorHandler` option, which should be the function you want called with the error information. By default, it will be called with the error's stack trace as an argument, but if you want the raw error itself you can set the\n`useRawError` option to `true`.\n\nFor example: \n\n````js\nVue.use(AsyncComputed, {\n  errorHandler (stack) {\n    console.log('Hey, an error!')\n    console.log('---')\n    console.log(stack)\n  }\n)\n\n// Or with `useRawError`:\nVue.use(AsyncComputed, {\n  useRawError: true,\n  errorHandler (err) {\n    console.log('An error occurred!')\n    console.log('The error message was: ' + err.msg)\n    console.log('And the stack trace was:')\n    console.log(err.stack)\n  }\n)\n````\n\nYou can pass `false` as the `errorHandler` in order to silently ignore rejected promises.\n\n## License\n\nMIT © [Benjamin Fox](http://github.com/foxbenjaminfox)\n\n[npm-url]: https://npmjs.org/package/vue-async-computed\n[npm-image]: https://img.shields.io/npm/v/vue-async-computed.svg?style=flat-square\n\n[travis-url]: https://travis-ci.org/foxbenjaminfox/vue-async-computed\n[travis-image]: https://img.shields.io/travis/foxbenjaminfox/vue-async-computed.svg?style=flat-square\n\n[coveralls-url]: https://coveralls.io/r/foxbenjaminfox/vue-async-computed\n[coveralls-image]: https://img.shields.io/coveralls/foxbenjaminfox/vue-async-computed.svg?style=flat-square\n\n[depstat-url]: https://david-dm.org/foxbenjaminfox/vue-async-computed\n[depstat-image]: https://david-dm.org/foxbenjaminfox/vue-async-computed.svg?style=flat-square\n\n[download-badge]: http://img.shields.io/npm/dm/vue-async-computed.svg?style=flat-square\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/foxbenjaminfox/vue-async-computed.git"
  },
  "scripts": {
    "build": "babel --optional runtime src -d dist",
    "check": "npm run lint -s && dependency-check package.json --entry src",
    "clean": "rimraf dist",
    "coverage": "babel-node node_modules/.bin/babel-istanbul cover test/index.js",
    "coveralls": "npm run coverage -s && coveralls < coverage/lcov.info",
    "lint": "eslint src test",
    "major": "npm version major && npm publish",
    "minor": "npm version minor && npm publish",
    "patch": "npm version patch && npm publish",
    "postbuild": "npm run test -s",
    "postcoveralls": "rimraf ./coverage",
    "postpublish": "git push origin master --follow-tags",
    "prebuild": "npm run check -s && npm run clean -s",
    "prepublish": "npm run build -s",
    "test": "babel-node test/index.js | tspec",
    "toc": "doctoc --github --title \"# Changelog\" CHANGELOG.md",
    "watch": "watch 'npm run build' src test"
  },
  "version": "3.1.3"
}
