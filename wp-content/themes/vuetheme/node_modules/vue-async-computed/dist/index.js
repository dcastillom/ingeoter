(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.AsyncComputed = mod.exports;
  }
})(this, function (module, exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var prefix = '_async_computed$';

  var AsyncComputed = {
    install: function install(Vue, pluginOptions) {
      pluginOptions = pluginOptions || {};

      Vue.config.optionMergeStrategies.asyncComputed = Vue.config.optionMergeStrategies.computed;

      Vue.mixin({
        beforeCreate: function beforeCreate() {
          var optionData = this.$options.data;

          if (!this.$options.computed) this.$options.computed = {};

          for (var key in this.$options.asyncComputed || {}) {
            this.$options.computed[prefix + key] = getterFor(this.$options.asyncComputed[key]);
          }

          this.$options.data = function vueAsyncComputedInjectedDataFn() {
            var data = (typeof optionData === 'function' ? optionData.call(this) : optionData) || {};
            for (var _key in this.$options.asyncComputed || {}) {
              data[_key] = null;
            }
            return data;
          };
        },
        created: function created() {
          var _this = this;

          for (var key in this.$options.asyncComputed || {}) {
            this[key] = defaultFor.call(this, this.$options.asyncComputed[key], pluginOptions);
          }

          var _loop = function _loop(_key2) {
            var promiseId = 0;
            _this.$watch(prefix + _key2, function (newPromise) {
              var thisPromise = ++promiseId;

              if (!newPromise || !newPromise.then) {
                newPromise = Promise.resolve(newPromise);
              }

              newPromise.then(function (value) {
                if (thisPromise !== promiseId) return;
                _this[_key2] = value;
              }).catch(function (err) {
                if (thisPromise !== promiseId) return;

                if (pluginOptions.errorHandler === false) return;

                var handler = pluginOptions.errorHandler === undefined ? console.error.bind(console, 'Error evaluating async computed property:') : pluginOptions.errorHandler;

                if (pluginOptions.useRawError) {
                  handler(err);
                } else {
                  handler(err.stack);
                }
              });
            }, { immediate: true });
          };

          for (var _key2 in this.$options.asyncComputed || {}) {
            _loop(_key2);
          }
        }
      });
    }
  };

  function getterFor(fn) {
    if (typeof fn === 'function') return fn;

    var getter = fn.get;

    if (fn.hasOwnProperty('watch')) {
      getter = function getter() {
        fn.watch.call(this);
        return fn.get(this);
      };
    }
    return getter;
  }

  function defaultFor(fn, pluginOptions) {
    var defaultValue = null;

    if ('default' in fn) {
      defaultValue = fn.default;
    } else if ('default' in pluginOptions) {
      defaultValue = pluginOptions.default;
    }

    if (typeof defaultValue === 'function') {
      return defaultValue.call(this);
    } else {
      return defaultValue;
    }
  }

  exports.default = AsyncComputed;


  /* istanbul ignore if */
  if (typeof window !== 'undefined' && window.Vue) {
    // Auto install in dist mode
    window.Vue.use(AsyncComputed);
  }
  module.exports = exports['default'];
});